<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="ro.ubb.core.service.ArtistServiceTest" tests="6" skipped="0" failures="0" errors="0" timestamp="2021-05-19T14:11:07" hostname="YORKSHIRE" time="0.149">
  <properties/>
  <testcase name="updateArtist" classname="ro.ubb.core.service.ArtistServiceTest" time="0.043"/>
  <testcase name="getByExactName" classname="ro.ubb.core.service.ArtistServiceTest" time="0.038"/>
  <testcase name="deleteArtist" classname="ro.ubb.core.service.ArtistServiceTest" time="0.021"/>
  <testcase name="addArtist" classname="ro.ubb.core.service.ArtistServiceTest" time="0.017"/>
  <testcase name="getByNameLike" classname="ro.ubb.core.service.ArtistServiceTest" time="0.012"/>
  <testcase name="getArtists" classname="ro.ubb.core.service.ArtistServiceTest" time="0.012"/>
  <system-out><![CDATA[2021-05-19T17:11:07,848 WARN  [Test worker]: AbstractTableMetaData                - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products. 
2021-05-19T17:11:07,863 TRACE [Test worker]: ArtistService                        - updateArtist - method entered: id=1, name=Dorinel, descriptionrocker 
Hibernate: select artist0_.artistId as artistId1_0_0_, artist0_.description as descript2_0_0_, artist0_.name as name3_0_0_ from artist artist0_ where artist0_.artistId=?
2021-05-19T17:11:07,863 TRACE [Test worker]: ArtistService                        - updateArtist - method finished 
Hibernate: update artist set description=?, name=? where artistId=?
2021-05-19T17:11:07,863 TRACE [Test worker]: ArtistService                        - get Artists --- method entered  
Hibernate: select artist0_.artistId as artistId1_0_, artist0_.description as descript2_0_, artist0_.name as name3_0_ from artist artist0_
2021-05-19T17:11:07,879 TRACE [Test worker]: ArtistService                        - getArtists: result[Artist(super=BaseEntity(id=1), name=Dorinel, description=rocker), Artist(super=BaseEntity(id=2), name=Marian, description=rapper), Artist(super=BaseEntity(id=3), name=Andrei, description=rapper)] 
2021-05-19T17:11:07,879 WARN  [Test worker]: AbstractTableMetaData                - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products. 
Hibernate: select distinct a.artistId as artistId1_0_0_, a.description as descript2_0_0_, a.name as name3_0_0_ from artist a where a.name = ?
2021-05-19T17:11:07,926 WARN  [Test worker]: AbstractTableMetaData                - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products. 
2021-05-19T17:11:07,926 TRACE [Test worker]: ArtistService                        - Removing artist with id 1 
Hibernate: select artist0_.artistId as artistId1_0_0_, artist0_.description as descript2_0_0_, artist0_.name as name3_0_0_ from artist artist0_ where artist0_.artistId=?
Hibernate: select artist0_.artistId as artistId1_0_0_, artist0_.description as descript2_0_0_, artist0_.name as name3_0_0_ from artist artist0_ where artist0_.artistId=?
Hibernate: select songs0_.artistId as artistId5_2_0_, songs0_.songId as songId1_2_0_, songs0_.songId as songId1_2_1_, songs0_.artistId as artistId5_2_1_, songs0_.key as key2_2_1_, songs0_.length as length3_2_1_, songs0_.title as title4_2_1_ from song songs0_ where songs0_.artistId=?
Hibernate: select reviews0_.songId as songId4_1_0_, reviews0_.reviewId as reviewId1_1_0_, reviews0_.reviewId as reviewId1_1_1_, reviews0_.review_text as review_t2_1_1_, reviews0_.songId as songId4_1_1_, reviews0_.stars as stars3_1_1_, reviews0_.userId as userId5_1_1_ from review reviews0_ where reviews0_.songId=?
Hibernate: select reviews0_.songId as songId4_1_0_, reviews0_.reviewId as reviewId1_1_0_, reviews0_.reviewId as reviewId1_1_1_, reviews0_.review_text as review_t2_1_1_, reviews0_.songId as songId4_1_1_, reviews0_.stars as stars3_1_1_, reviews0_.userId as userId5_1_1_ from review reviews0_ where reviews0_.songId=?
Hibernate: select reviews0_.songId as songId4_1_0_, reviews0_.reviewId as reviewId1_1_0_, reviews0_.reviewId as reviewId1_1_1_, reviews0_.review_text as review_t2_1_1_, reviews0_.songId as songId4_1_1_, reviews0_.stars as stars3_1_1_, reviews0_.userId as userId5_1_1_ from review reviews0_ where reviews0_.songId=?
Hibernate: select reviews0_.songId as songId4_1_0_, reviews0_.reviewId as reviewId1_1_0_, reviews0_.reviewId as reviewId1_1_1_, reviews0_.review_text as review_t2_1_1_, reviews0_.songId as songId4_1_1_, reviews0_.stars as stars3_1_1_, reviews0_.userId as userId5_1_1_ from review reviews0_ where reviews0_.songId=?
Hibernate: delete from song where songId=?
Hibernate: delete from song where songId=?
Hibernate: delete from song where songId=?
Hibernate: delete from song where songId=?
Hibernate: delete from artist where artistId=?
2021-05-19T17:11:07,941 TRACE [Test worker]: ArtistService                        - Removed artist with id 1 
2021-05-19T17:11:07,941 TRACE [Test worker]: ArtistService                        - get Artists --- method entered  
Hibernate: select artist0_.artistId as artistId1_0_, artist0_.description as descript2_0_, artist0_.name as name3_0_ from artist artist0_
2021-05-19T17:11:07,948 TRACE [Test worker]: ArtistService                        - getArtists: result[Artist(super=BaseEntity(id=2), name=Marian, description=rapper), Artist(super=BaseEntity(id=3), name=Andrei, description=rapper)] 
2021-05-19T17:11:07,948 WARN  [Test worker]: AbstractTableMetaData                - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products. 
2021-05-19T17:11:07,948 TRACE [Test worker]: ArtistService                        - Adding artist with nameMarius, descriptiontrapper 
Hibernate: insert into artist (artistId, description, name) values (null, ?, ?)
2021-05-19T17:11:07,948 TRACE [Test worker]: ArtistService                        - Added the artist with id5 
2021-05-19T17:11:07,948 TRACE [Test worker]: ArtistService                        - get Artists --- method entered  
Hibernate: select artist0_.artistId as artistId1_0_, artist0_.description as descript2_0_, artist0_.name as name3_0_ from artist artist0_
2021-05-19T17:11:07,964 TRACE [Test worker]: ArtistService                        - getArtists: result[Artist(super=BaseEntity(id=1), name=Johny, description=rapper), Artist(super=BaseEntity(id=2), name=Marian, description=rapper), Artist(super=BaseEntity(id=3), name=Andrei, description=rapper), Artist(super=BaseEntity(id=5), name=Marius, description=trapper)] 
2021-05-19T17:11:07,964 WARN  [Test worker]: AbstractTableMetaData                - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products. 
Hibernate: select distinct a.artistId as artistId1_0_0_, a.description as descript2_0_0_, a.name as name3_0_0_ from artist a where a.name like ?
2021-05-19T17:11:07,979 WARN  [Test worker]: AbstractTableMetaData                - Potential problem found: The configured data type factory 'class org.dbunit.dataset.datatype.DefaultDataTypeFactory' might cause problems with the current database 'H2' (e.g. some datatypes may not be supported properly). In rare cases you might see this message because the list of supported database products is incomplete (list=[derby]). If so please request a java-class update via the forums.If you are using your own IDataTypeFactory extending DefaultDataTypeFactory, ensure that you override getValidDbProducts() to specify the supported database products. 
2021-05-19T17:11:07,979 TRACE [Test worker]: ArtistService                        - get Artists --- method entered  
Hibernate: select artist0_.artistId as artistId1_0_, artist0_.description as descript2_0_, artist0_.name as name3_0_ from artist artist0_
2021-05-19T17:11:07,979 TRACE [Test worker]: ArtistService                        - getArtists: result[Artist(super=BaseEntity(id=1), name=Johny, description=rapper), Artist(super=BaseEntity(id=2), name=Marian, description=rapper), Artist(super=BaseEntity(id=3), name=Andrei, description=rapper)] 
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
